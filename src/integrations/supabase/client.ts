// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from './schema-fix';

// Fallback to hardcoded values if environment variables aren't available
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "https://zrjgcanxtojemyknzfgl.supabase.co";
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpyamdjYW54dG9qZW15a256ZmdsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAzNTY1NjMsImV4cCI6MjA1NTkzMjU2M30.fUzRKtbcoYU6SXhB3FM2gXtn2NhI9427-U6eAF5yDdE";

// Log the URL to verify it's set
console.log("Supabase URL:", supabaseUrl ? "URL is set" : "URL is missing");

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  supabaseUrl,
  supabaseAnonKey,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
    }
  }
);

// Helper function to parse image URLs from database
export const parseImageUrls = (imageUrl: string): string[] => {
  try {
    // Check if the URL is a data URL
    if (imageUrl.startsWith('data:')) {
      return [imageUrl];
    }
    
    // Check if it's already an array string
    if (imageUrl.startsWith('[') && imageUrl.endsWith(']')) {
      const parsed = JSON.parse(imageUrl);
      return Array.isArray(parsed) ? parsed : [imageUrl];
    }
    
    // If it's just a regular URL
    return [imageUrl];
  } catch (e) {
    return [imageUrl];
  }
};

// Default avatar URL for users without avatars
export const DEFAULT_AVATAR_URL = "/placeholder.svg";

// Get user avatar with fallback to default
export const getUserAvatar = (avatarUrl: string | null): string => {
  return avatarUrl || DEFAULT_AVATAR_URL;
};

// Create a storage bucket for avatars if it doesn't exist
const createAvatarsBucket = async () => {
  try {
    // Check if the bucket exists, but don't create it here
    // as it's now created via SQL migrations
    const { data, error } = await supabase.storage.getBucket('avatars');
    if (error) {
      console.warn("Avatars bucket not found, using default avatars");
    }
  } catch (error) {
    console.warn("Using default avatars:", error);
  }
};

// Initialize storage bucket
createAvatarsBucket();

// Also initialize a public bucket for general storage
const createPublicBucket = async () => {
  try {
    // Check if the bucket exists
    const { data, error } = await supabase.storage.getBucket('public');
    if (error) {
      console.warn("Public bucket not found, attempting to create it");
      try {
        // Create the bucket
        await supabase.storage.createBucket('public', {
          public: true,
          fileSizeLimit: 5 * 1024 * 1024 // 5MB limit
        });
        console.log("Created public bucket successfully");
      } catch (createError) {
        console.error("Failed to create public bucket:", createError);
      }
    }
  } catch (error) {
    console.warn("Error checking public bucket status:", error);
  }
};

// Run initialization
createPublicBucket();

// Add this to your initialization
export const supabaseRedirectUrl = `${window.location.origin}/auth-callback`;

// Use this variable when setting up auth redirects
