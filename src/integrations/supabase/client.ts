
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zrjgcanxtojemyknzfgl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpyamdjYW54dG9qZW15a256ZmdsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAzNTY1NjMsImV4cCI6MjA1NTkzMjU2M30.fUzRKtbcoYU6SXhB3FM2gXtn2NhI9427-U6eAF5yDdE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to parse image URLs from database
export const parseImageUrls = (imageUrl: string): string[] => {
  try {
    // Check if the URL is a data URL
    if (imageUrl.startsWith('data:')) {
      return [imageUrl];
    }
    
    // Check if it's already an array string
    if (imageUrl.startsWith('[') && imageUrl.endsWith(']')) {
      const parsed = JSON.parse(imageUrl);
      return Array.isArray(parsed) ? parsed : [imageUrl];
    }
    
    // If it's just a regular URL
    return [imageUrl];
  } catch (e) {
    return [imageUrl];
  }
};

// Create a storage bucket for avatars if it doesn't exist
const createAvatarsBucket = async () => {
  try {
    const { data, error } = await supabase.storage.getBucket('avatars');
    if (error) {
      console.error("Error checking avatars bucket:", error);
    }
  } catch (error) {
    console.error("Error with avatars bucket:", error);
  }
};

// Initialize storage bucket
createAvatarsBucket();
